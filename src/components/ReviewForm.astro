---
interface Props {
  serviceName: string;
  serviceSlug: string;
}

const { serviceName, serviceSlug } = Astro.props;
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
    Оставить отзыв о {serviceName}
  </h3>
  
  <form class="space-y-6" id="reviewForm">
    <input type="hidden" name="serviceSlug" value={serviceSlug} />
    
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
        Ваше имя
      </label>
      <input
        type="text"
        name="name"
        id="name"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
      />
    </div>

    <div>
      <label for="rating" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
        Оценка
      </label>
      <div class="mt-1 flex items-center space-x-2">
        {Array.from({ length: 5 }, (_, i) => i + 1).map((num) => (
          <button
            type="button"
            class="star-rating-btn text-2xl text-gray-300 dark:text-gray-600 hover:text-yellow-400 focus:outline-none"
            data-rating={num}
          >
            ★
          </button>
        ))}
      </div>
      <input type="hidden" name="rating" id="rating" value="0" required />
    </div>

    <div>
      <label for="comment" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
        Ваш отзыв
      </label>
      <textarea
        id="comment"
        name="comment"
        rows="4"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
      ></textarea>
    </div>

    <div>
      <button
        type="submit"
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
      >
        Отправить отзыв
      </button>
    </div>
  </form>
</div>

<script>
  // Star rating functionality
  const starButtons = document.querySelectorAll('.star-rating-btn');
  const ratingInput = document.getElementById('rating') as HTMLInputElement;

  starButtons.forEach(button => {
    button.addEventListener('click', () => {
      const rating = (button as HTMLElement).dataset.rating;
      if (rating) {
        ratingInput.value = rating;
        updateStars(parseInt(rating));
      }
    });
  });

  function updateStars(selectedRating: number) {
    starButtons.forEach((button, index) => {
      // Handle light and dark mode classes separately
      button.classList.toggle('text-yellow-400', index < selectedRating);
      button.classList.toggle('text-gray-300', index >= selectedRating);
      button.classList.toggle('dark:text-gray-600', index >= selectedRating);
    });
  }

  // Form submission
  const form = document.getElementById('reviewForm');
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const review = {
      user: formData.get('name'),
      rating: parseInt(formData.get('rating') as string),
      comment: formData.get('comment'),
      date: new Date().toISOString(),
      serviceSlug: formData.get('serviceSlug')
    };

    try {
      // Here you would typically send the review to your backend
      console.log('Review submitted:', review);
      
      // Clear form and show success message
      (e.target as HTMLFormElement).reset();
      ratingInput.value = '0';
      updateStars(0);
      
      // Reload the page to show the new review
      window.location.reload();
    } catch (error) {
      console.error('Error submitting review:', error);
    }
  });
</script>